<snippet>
	<content><![CDATA[
/*
Author: OMKAR SINGH (D.T.U)

		               _oo0oo_ 
		              o8888888o 
		              88" . "88 
		              (| -_- |) 
		              0\  =  /0 
		            ___/`---'\___ 
		          .' \\|     |// '. 
		         / \\|||  :  |||// \ 
		        / _||||| -:- |||||- \ 
		       |   | \\\  -  /// |   | 
		       | \_|  ''\---/''  |_/ | 
		       \  .-\__  '-'  ___/-. / 
		     ___'. .'  /--.--\  `. .'___ 
		  ."" '<  `.___\_<|>_/___.' >' "". 
		 | | :  `- \`.;`\ _ /`;.`/ - ` : | | 
		 \  \ `_.   \_ __\ /__ _/   .-` /  / 
		=====`-.____`.___ \_____/___.-`___.-'===== 
		               `=---=' 

PS: Beware the code genie!!
*/
//Header files
#include <bits/stdc++.h>

//Namespaces 
using namespace std;
using namespace chrono;

//optimizes compilation process
#pragma GCC optimize("Ofast,unroll-loops") 
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma") 

//Typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
double eps = 1e-12;

//Defines
#define mod 1000000007
#define mod1 1e9 + 7
#define PI 3.1415926535897932384626433832795l 
#define MOD 998244353
#define INF 1e18
#define endl "\n"
#define ff first
#define ss second
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()

//random number generator
mt19937 RNG(chrono::steady_clock::now().time_since_epoch().count()); 
#define SHUF(v) shuffle(all(v), RNG); 

//provides faster input output operations
#define fastio() ios_base::sync_with_stdio(0);cin.tie(0); cout.tie(0);

//Debug template
#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x << ": "; _print(x); cerr<<endl;
#else
#define debug(x)
#endif

void _print(int x) {cerr << x;}
void _print(ll x) {cerr << x;}
void _print(ull x) {cerr << x;}
void _print(float x) {cerr << x;}
void _print(double x) {cerr << x;}
void _print(lld x) {cerr << x;}
void _print(string x) {cerr << x;}
void _print(bool x) {cerr << x;}
void _print(char x) {cerr << x;}

template<class T> void _print(T* arr, ll n) {
	cerr << "[ ";
	for (ll i = 0; i < n; i++) {
		_print(arr[i]);
		cerr << " ";
	} cerr << " ]";
	cerr << endl;
}

template<class T> void _print(T** arr, ll n, ll m) {
	for (ll i = 0; i < n; i++) {
		cerr << "[ ";
		for (ll j = 0; j < m; j++) {
			_print(arr[i][j]);
			cerr << " ";
		} cerr << "]";
		cerr << endl;
	} cerr << endl;
}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(unordered_map <T, V> mp);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> s) {cerr << "[ "; for (T i : s) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> ms) {cerr << "[ "; for (T i : ms) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> mp) {cerr << "[ "; for (auto i : mp) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> mp) {cerr << "[ "; for (auto i : mp) {_print(i); cerr << " ";} cerr << "]";}

int32_t main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt","w",stderr);
#endif
	fastio();
	clock_t z = clock();
	auto start1 = high_resolution_clock::now();

	int t;
	cin>>t;
	while(t--){
		//code:
		
	}

	auto stop1 = high_resolution_clock::now();
	auto duration = duration_cast<microseconds>(stop1 - start1);
	
	cerr << "Run Time(in ms): " << duration . count() / 1000 << " ms" << endl;
	cerr << "Run Time(in s): " << ((double)(clock() - z) / CLOCKS_PER_SEC) << " s" << endl;

	return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>include</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
